@model WebApplication6.Models.Estudiantes

@{
    ViewBag.Title = "AñadirEstudianteForm";
}
    <div class="container">
        <h2 class="alert alert-success shadow p-3 mt-2">Añadir estudiante</h2>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal w-50">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Correo, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Correo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Correo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Domicilio, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Domicilio, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Domicilio, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Genero, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Genero, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Genero, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Codigo_Estudiante, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Codigo_Estudiante, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Codigo_Estudiante, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Codigo_MINED, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Codigo_MINED, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Codigo_MINED, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Str_Nombre_Padre, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Str_Nombre_Padre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Str_Nombre_Padre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Str_Nombre_Madre, htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Str_Nombre_Madre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Str_Nombre_Madre, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Image)
                    <input name="ImageFile" type="file" id="file" onchange="ValidarImagen(this);" />
                    <img id="img" src="" class="card" style="width:18rem;" />
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Id, "Año a cursar", htmlAttributes: new { @class = "control-label " })
                    <div class="col-md-10">
                        @Html.DropDownList("Id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Crear" class="btn btn-success" /> |
                        @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-dark" })
                    </div>
                </div>
            </div>
        }
    </div>

<script>
    function openImage() { //Esta función validaría una imágen

        var input = this;
        var file = input.files[0];
        var fileName = input.value;
        var maxSize = 1048576; //bytes
        var extensions = new RegExp(/.jpg|.jpeg|.png/i); //Extensiones válidas

        var error = {
            state: false,
            msg: ''
        };

        if (this.files && file) {

            for (var i = fileName.length - 1; i >= 0; i--) {

                if (fileName[i] == '.') {

                    var ext = fileName.substring(fileName[i], fileName.length);

                    if (!extensions.test(ext)) {
                        error.state = true;
                        error.msg += 'La extensión del archivo no es válida.<br>';
                    }

                    break;
                }

            }

            if (file.size > maxSize) {
                error.state = true;
                error.msg += 'La imágen no puede ocupar más de ' + maxSize / 1048576 + ' MB.';
            }

            if (error.state) {
                input.value = '';
               Swal.fire({
                  icon: 'error',
                   title: 'Problema ',
                   text: error.msg,
                })
                return;
            } else {
             
            }

            var reader = new FileReader();

            reader.onload = function (e) {
                document.getElementById("img").src = e.target.result;
            }
            reader.readAsDataURL(this.files[0]);
        }
    }
    document.getElementById("file").addEventListener("change", openImage, false); //Añadimos un evento al input para que se dispare cuando el usuario seleccione otro archivo
</script>