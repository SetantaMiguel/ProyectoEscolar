@model WebApplication6.Models.TipoEvaluacion

@{
    Layout = null;
}
<div class="modal-body">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="shadow p-3 bg-secondary text-white rounded text-center">Tipo Evaluacion</div>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id_TipoEvaluacion)

            <div class="form-group">
                @Html.LabelFor(model => model.strTipoEvaluacion, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.strTipoEvaluacion, new { htmlAttributes = new { @class = "form-control", id = "strTipoEvaluacion" } })
                    @Html.ValidationMessageFor(model => model.strTipoEvaluacion, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DescripcionTipEvaluacion, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.DescripcionTipEvaluacion, new { htmlAttributes = new { @class = "form-control", id = "DescripcionTipEvaluacion"  } })
                        @Html.ValidationMessageFor(model => model.DescripcionTipEvaluacion, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Valor, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Valor, new { htmlAttributes = new { @class = "form-control"  } })
                        @Html.ValidationMessageFor(model => model.Valor, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 text-md-center">
                    <input type="button" value="Guardar Cambios" class="btn btn-success" id="Save" />
                </div>
            </div>
        </div>
    }

</div>

<script language="JavaScript" type="text/javascript">
    $(function () {
        $("#Save").click(function () {
            var url = "@Url.Action("Edit", "TipoEvaluacions")";
            var _strTipoEvaluacion = $("#strTipoEvaluacion").val();
            var _Id = $("#Id_TipoEvaluacion").val();
            var _DescripcionTipEvaluacion = $("#DescripcionTipEvaluacion").val();
            var _Valor = $("#Valor").val();
            var data = { Id_TipoEvaluacion: _Id, DescripcionTipEvaluacion: _DescripcionTipEvaluacion, strTipoEvaluacion: _strTipoEvaluacion,Valor: _Valor }
            $.post(url, data).done(function (data) {
                if (data.Ok) {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true,
                        onOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'success',
                        title: 'Se guardo exitosamente'
                    })
                    setTimeout(function(){ window.location = window.location;  }, 2000);
                     

                }
                else {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        onOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'error',
                        title: 'Digito campos vacios'
                    })
                }


            }).fail(function () {
               const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        onOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'error',
                        title: 'Ocurrio un error en el servidor'
                    })
            }).always(function () {
            });
        });
    });
</script>